#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ user_trainings –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
"""

import asyncio
import httpx
import time
import json


async def test_performance_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    url = "http://127.0.0.1:8000/user_trainings/"
    params = {
        "user_program_uuid": "d02e8d12-5756-47f2-afd3-88cca3c97ef3",
        "page": 1,
        "page_size": 50
    }
    
    print("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ user_trainings...")
    print(f"üì° URL: {url}")
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    print("-" * 50)
    
    async with httpx.AsyncClient() as client:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–∂–∏–¥–∞–µ–º 401 - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        print("üìä –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        start_time = time.time()
        
        response = await client.get(url, params=params)
        end_time = time.time()
        execution_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (401 - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!")
        elif response.status_code == 200:
            data = response.json()
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data.get('data', []))}")
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {data.get('pagination', {}).get('total_count', 0)}")
            print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π!")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}...")
        
        print("-" * 50)
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("üîÑ –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        start_time = time.time()
        
        response = await client.get(url, params=params)
        end_time = time.time()
        cached_execution_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π): {cached_execution_time:.3f} —Å–µ–∫—É–Ω–¥")
        
        if cached_execution_time < execution_time * 0.8:
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è")
        
        print("-" * 50)
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        print("üìÑ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        test_params = [
            {"page": 1, "page_size": 10},
            {"page": 2, "page_size": 10},
            {"page": 1, "page_size": 100},
        ]
        
        for i, test_param in enumerate(test_params, 1):
            params_test = {**params, **test_param}
            start_time = time.time()
            response = await client.get(url, params=params_test)
            end_time = time.time()
            test_time = end_time - start_time
            
            print(f"üìÑ –¢–µ—Å—Ç {i}: page={test_param['page']}, size={test_param['page_size']} - {test_time:.3f}—Å - {response.status_code}")
        
        print("-" * 50)
        print("üéâ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò USER_TRAININGS")
    print("=" * 60)
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --reload")
    print("=" * 60)
    
    asyncio.run(test_performance_simple()) 
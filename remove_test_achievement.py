import asyncio
from app.database import async_session_maker
from app.achievements.models import Achievement
from sqlalchemy import select, delete

async def remove_test_achievement():
    async with async_session_maker() as session:
        print("üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –î–û–°–¢–ò–ñ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        result = await session.execute(
            select(Achievement).where(Achievement.name == '–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)')
        )
        achievement = result.scalar_one_or_none()
        
        if achievement:
            # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            await session.execute(
                delete(Achievement).where(Achievement.id == achievement.id)
            )
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {achievement.name} (ID: {achievement.id})")
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await session.execute(
                select(Achievement).where(Achievement.achievement_type_id.is_(None))
            )
            remaining = result.scalars().all()
            
            if not remaining:
                print("‚úÖ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç —Ç–∏–ø!")
            else:
                print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {len(remaining)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –±–µ–∑ —Ç–∏–ø–∞")
        else:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(remove_test_achievement())


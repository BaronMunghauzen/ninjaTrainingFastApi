import asyncio
from app.database import async_session_maker
from app.achievements.dao import AchievementTypeDAO
from app.achievements.schemas import AchievementTypeDisplay
from typing import List

async def test_router_logic():
    async with async_session_maker() as session:
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –†–û–£–¢–ï–†–ê")
        print("=" * 50)
        
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞
            achievement_type_dao = AchievementTypeDAO(session)
            
            print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º find_active()...")
            active_types = await achievement_type_dao.find_active()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤: {len(active_types)}")
            
            print("\n2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ö–µ–º—É...")
            display_types: List[AchievementTypeDisplay] = []
            
            for i, at in enumerate(active_types[:5]):  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                try:
                    display = AchievementTypeDisplay.model_validate(at)
                    display_types.append(display)
                    print(f"‚úÖ {i+1}. {display.name} - —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    print(f"‚ùå {i+1}. {at.name} - –æ—à–∏–±–∫–∞: {e}")
                    break
            
            print(f"\nüìä –£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: {len(display_types)} –∏–∑ 5")
            
            if display_types:
                print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON
                    import json
                    from pydantic import TypeAdapter
                    
                    adapter = TypeAdapter(List[AchievementTypeDisplay])
                    json_data = adapter.dump_python(display_types)
                    print(f"‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(str(json_data))} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_router_logic())


#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from sqlalchemy import text

async def check_achievements_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    print("üèÜ –ü–†–û–í–ï–†–ö–ê –í–°–ï–ô –°–ò–°–¢–ï–ú–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô")
    print("=" * 80)
    
    async with async_session_maker() as session:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
            print("\nüìã –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶:")
            print("-" * 40)
            
            tables = ['achievements', 'achievement_types']
            table_status = {}
            
            for table in tables:
                exists_query = text("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = :table_name
                    );
                """)
                result = await session.execute(exists_query, {"table_name": table})
                exists = result.scalar()
                table_status[table] = exists
                
                status_icon = "‚úÖ" if exists else "‚ùå"
                print(f"  {status_icon} –¢–∞–±–ª–∏—Ü–∞ '{table}': {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '–ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
            
            if not all(table_status.values()):
                print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
                return
            
            print("\n‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
            
            # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –î–û–°–¢–ò–ñ–ï–ù–ò–ô:")
            print("-" * 40)
            
            types_count_query = text("SELECT COUNT(*) FROM achievement_types")
            result = await session.execute(types_count_query)
            types_count = result.scalar()
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {types_count}")
            
            if types_count > 0:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                category_stats_query = text("""
                    SELECT category, COUNT(*) as count
                    FROM achievement_types 
                    GROUP BY category 
                    ORDER BY count DESC
                """)
                result = await session.execute(category_stats_query)
                category_stats = result.fetchall()
                
                print(f"  ‚Ä¢ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for stat in category_stats:
                    print(f"    - {stat[0]}: {stat[1]} —Ç–∏–ø–æ–≤")
                
                # –û–±—â–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤
                total_points_query = text("SELECT SUM(points) FROM achievement_types")
                result = await session.execute(total_points_query)
                total_points = result.scalar()
                print(f"  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤: {total_points}")
            
            # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–¥–∞–Ω–Ω—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
            print("\nüèÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–´–î–ê–ù–ù–´–ú –î–û–°–¢–ò–ñ–ï–ù–ò–Ø–ú:")
            print("-" * 40)
            
            achievements_count_query = text("SELECT COUNT(*) FROM achievements")
            result = await session.execute(achievements_count_query)
            achievements_count = result.scalar()
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements_count}")
            
            if achievements_count > 0:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_stats_query = text("""
                    SELECT status, COUNT(*) as count
                    FROM achievements 
                    GROUP BY status 
                    ORDER BY count DESC
                """)
                result = await session.execute(status_stats_query)
                status_stats = result.fetchall()
                
                print(f"  ‚Ä¢ –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
                for stat in status_stats:
                    print(f"    - {stat[0]}: {stat[1]} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                users_stats_query = text("""
                    SELECT user_id, COUNT(*) as count
                    FROM achievements 
                    GROUP BY user_id 
                    ORDER BY count DESC 
                    LIMIT 5
                """)
                result = await session.execute(users_stats_query)
                users_stats = result.fetchall()
                
                print(f"  ‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º:")
                for user_stat in users_stats:
                    # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    email_query = text('SELECT email FROM "user" WHERE id = :user_id')
                    email_result = await session.execute(email_query, {"user_id": user_stat[0]})
                    email = email_result.scalar()
                    print(f"    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_stat[0]} ({email}): {user_stat[1]} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
            print("\nüîó –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –¢–ê–ë–õ–ò–¶–ê–ú–ò:")
            print("-" * 40)
            
            if achievements_count > 0 and types_count > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–∏–ø–∞—Ö
                missing_types_query = text("""
                    SELECT DISTINCT a.name
                    FROM achievements a
                    LEFT JOIN achievement_types at ON a.name = at.name
                    WHERE at.name IS NULL
                """)
                result = await session.execute(missing_types_query)
                missing_types = result.fetchall()
                
                if missing_types:
                    print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(missing_types)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –±–µ–∑ —Ç–∏–ø–∞:")
                    for missing in missing_types:
                        print(f"    - {missing[0]}")
                else:
                    print("  ‚úÖ –í—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å
                unused_types_query = text("""
                    SELECT at.name, at.category, at.points
                    FROM achievement_types at
                    LEFT JOIN achievements a ON at.name = a.name
                    WHERE a.name IS NULL
                    ORDER BY at.points DESC
                    LIMIT 5
                """)
                result = await session.execute(unused_types_query)
                unused_types = result.fetchall()
                
                if unused_types:
                    print(f"  üìù –¢–æ–ø-5 —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å:")
                    for unused in unused_types:
                        print(f"    - {unused[0]} ({unused[1]}) - {unused[2]} –æ—á–∫–æ–≤")
                else:
                    print("  üéâ –í—Å–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É–∂–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å!")
            
            # 5. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            print("\nüìà –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:")
            print("-" * 40)
            
            if types_count >= 40 and achievements_count > 0:
                print("  üèÜ –û—Ç–ª–∏—á–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
                print("  ‚úÖ –ï—Å—Ç—å –≤—ã–¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            elif types_count >= 40:
                print("  üéØ –•–æ—Ä–æ—à–æ! –¢–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
                print("  ‚ö†Ô∏è  –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ)")
                print("  üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
            else:
                print("  ‚ùå –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                print("  ‚ö†Ô∏è  –ù–µ –≤—Å–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                print("  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            
            # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 40)
            
            if types_count >= 40:
                print("  ‚úÖ –¢–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print("  üí° –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —á–µ—Ä–µ–∑ SQL –∏–ª–∏ Python")
                print("  üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI")
                print("  üí° –°–≤—è–∑—ã–≤–∞–π—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π achievements –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            
            if achievements_count > 0:
                print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print("  üí° –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("  üí° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print("  üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: python create_test_achievement.py")
                print("  üí° –ò–ª–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ: python demo_achievements.py")
            
            print("\nüéØ –î–û–°–¢–£–ü–ù–´–ï –°–ö–†–ò–ü–¢–´:")
            print("-" * 40)
            print("  ‚Ä¢ python quick_view_achievement_types.py - –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–ø–æ–≤")
            print("  ‚Ä¢ python view_achievement_types.py - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–ø–æ–≤")
            print("  ‚Ä¢ python quick_view_achievements.py - –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            print("  ‚Ä¢ python check_achievements.py - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            print("  ‚Ä¢ python check_all_tables.py - –æ–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î")
            
            print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_achievements_system())






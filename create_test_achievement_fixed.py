#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from sqlalchemy import text

async def create_test_achievement_fixed():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –î–û–°–¢–ò–ñ–ï–ù–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–û)")
    print("=" * 60)
    
    async with async_session_maker() as session:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            users_query = text('SELECT id, uuid, email FROM "user" LIMIT 3')
            result = await session.execute(users_query)
            users = result.fetchall()
            
            if not users:
                print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                return
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            for user in users:
                print(f"   ‚Ä¢ ID: {user[0]}, Email: {user[2]}")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_user = users[0]
            print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID {test_user[0]}, Email: {test_user[2]}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
            count_before_query = text("SELECT COUNT(*) FROM achievements")
            result = await session.execute(count_before_query)
            count_before = result.scalar()
            print(f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {count_before}")
            
            # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            print("\nüèÜ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            uuid_query = text("SELECT gen_random_uuid()")
            result = await session.execute(uuid_query)
            achievement_uuid = result.scalar()
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            insert_query = text("""
                INSERT INTO achievements (
                    uuid, 
                    name, 
                    user_id, 
                    status, 
                    created_at, 
                    updated_at
                ) VALUES (
                    :uuid,
                    :name,
                    :user_id,
                    :status,
                    :created_at,
                    :updated_at
                ) RETURNING id;
            """)
            
            now = datetime.now()
            result = await session.execute(insert_query, {
                "uuid": achievement_uuid,
                "name": "–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)",
                "user_id": test_user[0],
                "status": "active",
                "created_at": now,
                "updated_at": now
            })
            
            achievement_id = result.scalar()
            
            # 4. –Ø–í–ù–û –∫–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await session.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!")
            print(f"   ID: {achievement_id}")
            print(f"   UUID: {achievement_uuid}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: –¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user[2]} (ID: {test_user[0]})")
            print(f"   –°—Ç–∞—Ç—É—Å: active")
            print(f"   –°–æ–∑–¥–∞–Ω–æ: {now}")
            print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞!")
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
            print("\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–°–õ–ï –ö–û–ú–ú–ò–¢–ê:")
            print("-" * 40)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            count_after_query = text("SELECT COUNT(*) FROM achievements")
            result = await session.execute(count_after_query)
            count_after = result.scalar()
            print(f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {count_after}")
            
            if count_after > count_before:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {count_after - count_before} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!")
            else:
                print("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å!")
            
            # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            select_query = text("""
                SELECT id, uuid, name, user_id, status, created_at, updated_at
                FROM achievements 
                WHERE id = :achievement_id
            """)
            result = await session.execute(select_query, {"achievement_id": achievement_id})
            achievement = result.fetchone()
            
            if achievement:
                print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:")
                print(f"   ID: {achievement[0]}")
                print(f"   UUID: {achievement[1]}")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {achievement[2]}")
                print(f"   ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {achievement[3]}")
                print(f"   –°—Ç–∞—Ç—É—Å: {achievement[4]}")
                print(f"   –°–æ–∑–¥–∞–Ω–æ: {achievement[5]}")
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {achievement[6]}")
            else:
                print("‚ùå –°–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            
            # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_achievements_query = text("""
                SELECT id, uuid, name, status, created_at 
                FROM achievements 
                WHERE user_id = :user_id 
                ORDER BY created_at DESC
            """)
            result = await session.execute(user_achievements_query, {"user_id": test_user[0]})
            user_achievements = result.fetchall()
            
            print(f"\nüìã –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user[2]}:")
            print("-" * 40)
            if user_achievements:
                for achievement in user_achievements:
                    print(f"‚Ä¢ {achievement[2]} (—Å—Ç–∞—Ç—É—Å: {achievement[3]}, —Å–æ–∑–¥–∞–Ω–æ: {achievement[4]})")
            else:
                print("  –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            
            # 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
            all_achievements_query = text("""
                SELECT id, name, user_id, status, created_at 
                FROM achievements 
                ORDER BY created_at DESC
            """)
            result = await session.execute(all_achievements_query)
            all_achievements = result.fetchall()
            
            print(f"\nüìã –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ:")
            print("-" * 40)
            if all_achievements:
                for achievement in all_achievements:
                    print(f"‚Ä¢ ID {achievement[0]}: {achievement[1]} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {achievement[2]}, —Å—Ç–∞—Ç—É—Å: {achievement[3]})")
            else:
                print("  –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            
            print(f"\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
            print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python check_achievements.py")
            print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python view_achievements_sql.py")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python check_all_tables.py")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await session.rollback()

if __name__ == "__main__":
    asyncio.run(create_test_achievement_fixed())






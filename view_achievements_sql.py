#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ SQL
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from sqlalchemy import text

async def view_achievements_sql():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã"""
    
    print("üîç –ü–†–Ø–ú–û–ô –ü–†–û–°–ú–û–¢–† –¢–ê–ë–õ–ò–¶–´ ACHIEVEMENTS")
    print("=" * 60)
    
    async with async_session_maker() as session:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
            table_exists_query = text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'achievements'
                );
            """)
            result = await session.execute(table_exists_query)
            table_exists = result.scalar()
            
            if not table_exists:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'achievements' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'achievements' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            print("\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´:")
            print("-" * 40)
            structure_query = text("""
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default,
                    ordinal_position
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = 'achievements' 
                ORDER BY ordinal_position;
            """)
            result = await session.execute(structure_query)
            columns = result.fetchall()
            
            for col in columns:
                nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                default = f" DEFAULT {col[3]}" if col[3] else ""
                print(f"  {col[4]:2d}. {col[0]:<20} {col[1]:<15} {nullable}{default}")
            
            # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            print("\nüìä –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–ò–°–ï–ô:")
            print("-" * 40)
            count_query = text("SELECT COUNT(*) FROM achievements")
            result = await session.execute(count_query)
            total_count = result.scalar()
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")
            
            # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if total_count > 0:
                print(f"\nüìã –í–°–ï –ó–ê–ü–ò–°–ò –í –¢–ê–ë–õ–ò–¶–ï:")
                print("-" * 40)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                all_records_query = text("""
                    SELECT 
                        id,
                        uuid,
                        name,
                        user_id,
                        status,
                        user_training_id,
                        user_program_id,
                        program_id,
                        created_at,
                        updated_at
                    FROM achievements 
                    ORDER BY created_at DESC;
                """)
                result = await session.execute(all_records_query)
                records = result.fetchall()
                
                for i, record in enumerate(records, 1):
                    print(f"\nüéØ –ó–∞–ø–∏—Å—å #{i}:")
                    print(f"   ID: {record[0]}")
                    print(f"   UUID: {record[1]}")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {record[2]}")
                    print(f"   ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {record[3]}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {record[4]}")
                    print(f"   ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {record[5]}")
                    print(f"   ID –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {record[6]}")
                    print(f"   ID –ø—Ä–æ–≥—Ä–∞–º–º—ã: {record[7]}")
                    print(f"   –°–æ–∑–¥–∞–Ω–æ: {record[8]}")
                    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {record[9]}")
                    print("   " + "-" * 30)
            else:
                print("\nüì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ - –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä INSERT –∑–∞–ø—Ä–æ—Å–∞
                print("\nüí° –ü—Ä–∏–º–µ—Ä INSERT –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
                print("-" * 40)
                print("""
INSERT INTO achievements (uuid, name, user_id, status, created_at, updated_at)
VALUES (
    gen_random_uuid(),
    '–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
    1,
    'active',
    NOW(),
    NOW()
);
                """)
            
            # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
            print("-" * 40)
            status_stats_query = text("""
                SELECT 
                    status,
                    COUNT(*) as count
                FROM achievements 
                GROUP BY status 
                ORDER BY count DESC;
            """)
            result = await session.execute(status_stats_query)
            status_stats = result.fetchall()
            
            if status_stats:
                for stat in status_stats:
                    print(f"  ‚Ä¢ {stat[0]}: {stat[1]} –∑–∞–ø–∏—Å–µ–π")
            else:
                print("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
            # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            print("\nüë• –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –î–û–°–¢–ò–ñ–ï–ù–ò–Ø–ú:")
            print("-" * 40)
            top_users_query = text("""
                SELECT 
                    user_id,
                    COUNT(*) as achievements_count
                FROM achievements 
                GROUP BY user_id 
                ORDER BY achievements_count DESC 
                LIMIT 5;
            """)
            result = await session.execute(top_users_query)
            top_users = result.fetchall()
            
            if top_users:
                for user in top_users:
                    print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user[0]}: {user[1]} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            else:
                print("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(view_achievements_sql())






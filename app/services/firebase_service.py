import firebase_admin
from firebase_admin import credentials, messaging
from pathlib import Path
import logging
import os

logger = logging.getLogger(__name__)

class FirebaseService:
    _initialized = False
    
    @classmethod
    def initialize(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK"""
        if cls._initialized:
            return
            
        try:
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å credentials (—Å–∫–∞—á–∞–Ω–Ω—ã–π –∏–∑ Firebase Console)
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            cred_path = os.getenv('FIREBASE_CREDENTIALS_PATH')
            
            if not cred_path:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                cred_path = Path(__file__).parent.parent.parent / 'firebase-credentials.json'
            else:
                cred_path = Path(cred_path)
            
            if not cred_path.exists():
                logger.error(f"Firebase credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {cred_path}")
                raise FileNotFoundError(f"–ü–æ–º–µ—Å—Ç–∏—Ç–µ firebase-credentials.json –≤ {cred_path}")
            
            cred = credentials.Certificate(str(cred_path))
            firebase_admin.initialize_app(cred)
            cls._initialized = True
            logger.info("‚úÖ Firebase Admin SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
            raise
    
    @classmethod
    def send_notification(
        cls,
        fcm_token: str,
        title: str,
        body: str,
        data: dict = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ FCM
        
        Args:
            fcm_token: FCM —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            body: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not cls._initialized:
            cls.initialize()
        
        try:
            message = messaging.Message(
                notification=messaging.Notification(
                    title=title,
                    body=body,
                ),
                data=data or {},
                token=fcm_token,
                android=messaging.AndroidConfig(
                    priority='high',
                    notification=messaging.AndroidNotification(
                        sound='default',
                        channel_id='timer_channel',
                        priority='max',
                    ),
                ),
                apns=messaging.APNSConfig(
                    payload=messaging.APNSPayload(
                        aps=messaging.Aps(
                            sound='default',
                            badge=1,
                        ),
                    ),
                ),
            )
            
            response = messaging.send(message)
            logger.info(f"‚úÖ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response}")
            return True
            
        except messaging.UnregisteredError:
            logger.warning(f"‚ö†Ô∏è FCM —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª: {fcm_token[:20]}...")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            return "INVALID_TOKEN"
        except messaging.SenderIdMismatchError:
            logger.error(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Sender ID: {fcm_token[:20]}...")
            return "INVALID_TOKEN"
        except messaging.InvalidArgumentError as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã FCM: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM: {e}")
            return False
    
    @classmethod
    def send_notification_with_cleanup(
        cls,
        fcm_token: str,
        title: str,
        body: str,
        data: dict = None,
        user_uuid: str = None,
        session = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        
        Args:
            fcm_token: FCM —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            body: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_uuid: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞)
            session: SQLAlchemy —Å–µ—Å—Å–∏—è (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞)
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        result = cls.send_notification(fcm_token, title, body, data)
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if result == "INVALID_TOKEN" and user_uuid and session:
            try:
                from app.users.models import User
                from sqlalchemy import select
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_query = session.execute(
                    select(User).filter(User.uuid == user_uuid)
                )
                user = result_query.scalar_one_or_none()
                
                if user and user.fcm_token == fcm_token:
                    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
                    user.fcm_token = None
                    session.commit()
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π FCM —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_uuid}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        
        return result == True

"""add_subscriptions_and_payments_tables

Revision ID: f5992c8e0d54
Revises: e921d43ab76b
Create Date: 2025-10-07 19:54:01.238240

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f5992c8e0d54'
down_revision: Union[str, Sequence[str], None] = 'e921d43ab76b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('subscription_plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('plan_type', sa.Enum('month_1', 'month_3', 'month_6', 'month_12', name='subscriptionplanenum'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('duration_months', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('price_per_month', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plan_type')
    )
    op.create_index(op.f('ix_subscription_plans_uuid'), 'subscription_plans', ['uuid'], unique=True)
    
    # Заполняем таблицу тарифными планами
    op.execute("""
        INSERT INTO subscription_plans (uuid, plan_type, name, duration_months, price, price_per_month, description, is_active, created_at, updated_at)
        VALUES 
            (gen_random_uuid(), 'month_1', '1 месяц', 1, 990.00, 990.00, 'Подписка на 1 месяц', true, NOW(), NOW()),
            (gen_random_uuid(), 'month_3', '3 месяца', 3, 2490.00, 830.00, 'Подписка на 3 месяца. Выгода 16%!', true, NOW(), NOW()),
            (gen_random_uuid(), 'month_6', '6 месяцев', 6, 4490.00, 748.33, 'Подписка на 6 месяцев. Выгода 24%!', true, NOW(), NOW()),
            (gen_random_uuid(), 'month_12', '12 месяцев', 12, 7990.00, 665.83, 'Подписка на 12 месяцев. Выгода 33%!', true, NOW(), NOW())
    """)
    
    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('status', sa.Enum('pending', 'processing', 'succeeded', 'failed', 'cancelled', 'refunded', name='paymentstatusenum'), nullable=False),
    sa.Column('payment_id', sa.String(), nullable=True),
    sa.Column('payment_url', sa.Text(), nullable=True),
    sa.Column('receipt_url', sa.Text(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('payment_metadata', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['subscription_plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_uuid'), 'payments', ['uuid'], unique=True)
    op.create_table('subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('is_trial', sa.Boolean(), nullable=False),
    sa.Column('auto_renew', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['subscription_plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscriptions_uuid'), 'subscriptions', ['uuid'], unique=True)
    op.add_column('user', sa.Column('trial_used', sa.Boolean(), server_default=sa.text('false'), nullable=False))
    op.add_column('user', sa.Column('trial_started_at', sa.DateTime(), nullable=True))
    op.drop_index(op.f('ix_user_measurement_types_id'), table_name='user_measurement_types')
    op.drop_index(op.f('ix_user_measurements_id'), table_name='user_measurements')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_user_measurements_id'), 'user_measurements', ['id'], unique=False)
    op.create_index(op.f('ix_user_measurement_types_id'), 'user_measurement_types', ['id'], unique=False)
    op.drop_column('user', 'trial_started_at')
    op.drop_column('user', 'trial_used')
    op.drop_index(op.f('ix_subscriptions_uuid'), table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_payments_uuid'), table_name='payments')
    op.drop_table('payments')
    
    # Удаляем тарифные планы перед удалением таблицы
    op.execute("DELETE FROM subscription_plans WHERE plan_type IN ('month_1', 'month_3', 'month_6', 'month_12')")
    
    op.drop_index(op.f('ix_subscription_plans_uuid'), table_name='subscription_plans')
    op.drop_table('subscription_plans')
    
    # Удаляем enum типы
    op.execute("DROP TYPE IF EXISTS subscriptionplanenum")
    op.execute("DROP TYPE IF EXISTS paymentstatusenum")
    # ### end Alembic commands ###

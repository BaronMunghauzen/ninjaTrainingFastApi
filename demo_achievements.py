#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""

import asyncio
import sys
import os
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from app.achievements.dao import AchievementDAO
from app.users.dao import UsersDAO
from app.user_training.dao import UserTrainingDAO
from app.user_program.dao import UserProgramDAO
from app.programs.dao import ProgramDAO
from sqlalchemy import text

async def create_demo_achievements():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –î–û–°–¢–ò–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    async with async_session_maker() as session:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            users_query = text('SELECT id, uuid, email FROM "user" LIMIT 5')
            result = await session.execute(users_query)
            users = result.fetchall()
            
            if not users:
                print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                print("   –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î")
                return
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            for user in users:
                print(f"   ‚Ä¢ ID: {user[0]}, Email: {user[2]}")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            demo_user = users[0]
            print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID {demo_user[0]}, Email: {demo_user[2]}")
            
            # 2. –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            print("\nüèÜ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")
            
            # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            demo_achievements = [
                {
                    "name": "1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                    "status": "active",
                    "description": "–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                },
                {
                    "name": "3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                    "status": "active", 
                    "description": "–¢—Ä–µ—Ç—å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                },
                {
                    "name": "5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
                    "status": "active",
                    "description": "–ü—è—Ç–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                },
                {
                    "name": "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
                    "status": "active",
                    "description": "5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å 5 –¥–æ 8 —É—Ç—Ä–∞"
                },
                {
                    "name": "–°–æ–≤–∞",
                    "status": "active",
                    "description": "5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å 21 –¥–æ 00"
                },
                {
                    "name": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º 2025",
                    "status": "active",
                    "description": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –Ω–æ—á—å"
                },
                {
                    "name": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å 2025",
                    "status": "active",
                    "description": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 8 –º–∞—Ä—Ç–∞"
                },
                {
                    "name": "–ú—É–∂—Å–∫–æ–π –¥–µ–Ω—å 2025",
                    "status": "active",
                    "description": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 23 —Ñ–µ–≤—Ä–∞–ª—è"
                },
                {
                    "name": "–ú–æ—â—å –∏ —Å–∏–ª–∞",
                    "status": "active",
                    "description": "–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–ª–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
                },
                {
                    "name": "3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
                    "status": "active",
                    "description": "3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"
                },
                {
                    "name": "2 –Ω–µ–¥–µ–ª–∏ –ø–æ–¥—Ä—è–¥",
                    "status": "active",
                    "description": "2 –Ω–µ–¥–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥"
                },
                {
                    "name": "2 –º–µ—Å—è—Ü–∞ –ø–æ–¥—Ä—è–¥",
                    "status": "active",
                    "description": "2 –º–µ—Å—è—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥"
                }
            ]
            
            created_count = 0
            
            for achievement_data in demo_achievements:
                try:
                    # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DAO
                    achievement_uuid = await AchievementDAO.add(
                        name=achievement_data["name"],
                        user_id=demo_user[0],
                        status=achievement_data["status"]
                    )
                    
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {achievement_data['name']} (UUID: {achievement_uuid})")
                    created_count += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '{achievement_data['name']}': {e}")
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {created_count} –∏–∑ {len(demo_achievements)}")
            
            # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print("-" * 40)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            count_query = text("SELECT COUNT(*) FROM achievements")
            result = await session.execute(count_query)
            total_count = result.scalar()
            print(f"–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ: {total_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_achievements_query = text("""
                SELECT id, uuid, name, status, created_at 
                FROM achievements 
                WHERE user_id = :user_id 
                ORDER BY created_at DESC
            """)
            result = await session.execute(user_achievements_query, {"user_id": demo_user[0]})
            user_achievements = result.fetchall()
            
            print(f"\nüìã –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {demo_user[2]}:")
            print("-" * 40)
            for achievement in user_achievements:
                print(f"‚Ä¢ {achievement[2]} (—Å—Ç–∞—Ç—É—Å: {achievement[3]}, —Å–æ–∑–¥–∞–Ω–æ: {achievement[4]})")
            
            print(f"\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
            print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python check_achievements.py")
            print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python check_all_tables.py")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API: GET /achievements/")
            print("   4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≤–∞—à–µ–π –°–£–ë–î (pgAdmin, DBeaver, etc.)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(create_demo_achievements())

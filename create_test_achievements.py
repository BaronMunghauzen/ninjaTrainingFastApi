import asyncio
from app.database import async_session_maker
from app.achievements.service import AchievementService
from sqlalchemy import text

async def create_test_achievements():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã"""
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
    print("=" * 50)
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
        user_query = text("""
            SELECT u.id, u.uuid, u.first_name, u.last_name, 
                   COUNT(ut.id) as total_trainings,
                   COUNT(CASE WHEN ut.status = 'PASSED' THEN 1 END) as completed_trainings
            FROM "user" u
            LEFT JOIN user_training ut ON u.id = ut.user_id
            GROUP BY u.id, u.uuid, u.first_name, u.last_name
            HAVING COUNT(ut.id) > 0
            ORDER BY COUNT(ut.id) DESC
            LIMIT 1
        """)
        result = await session.execute(user_query)
        user = result.fetchone()
        
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ")
            return
        
        user_id, user_uuid, first_name, last_name, total_trainings, completed_trainings = user
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} {last_name or '–ë–µ–∑ —Ñ–∞–º–∏–ª–∏–∏'} (ID: {user_id}, UUID: {user_uuid})")
        print(f"üìä –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –≤—Å–µ–≥–æ {total_trainings}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ {completed_trainings}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        completed_trainings_query = text("""
            SELECT id, uuid, training_date, completed_at, status
            FROM user_training 
            WHERE user_id = :user_id AND status = 'PASSED'
            ORDER BY completed_at DESC
            LIMIT 5
        """)
        result = await session.execute(completed_trainings_query, {"user_id": user_id})
        completed_trainings_list = result.fetchall()
        
        print(f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
        for i, training in enumerate(completed_trainings_list, 1):
            training_id, training_uuid, training_date, completed_at, status = training
            print(f"  {i}. ID: {training_id}, –î–∞—Ç–∞: {training_date}, –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_at}")
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_uuid}...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
            training_count_achievements = await AchievementService.check_training_count_achievements(str(user_uuid))
            
            if training_count_achievements:
                print(f"‚úÖ –í—ã–¥–∞–Ω–æ {len(training_count_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!")
                for ach in training_count_achievements:
                    print(f"   üèÜ {ach.name}")
            else:
                print("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é
            print("\nüìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é...")
            weekly_achievements = await AchievementService.check_weekly_training_achievements(str(user_uuid))
            
            if weekly_achievements:
                print(f"‚úÖ –í—ã–¥–∞–Ω–æ {len(weekly_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é!")
                for ach in weekly_achievements:
                    print(f"   üìÖ {ach.name}")
            else:
                print("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
            print("\nüîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –Ω–µ–¥–µ–ª–∏...")
            consecutive_weeks_achievements = await AchievementService.check_consecutive_weeks_achievements(str(user_uuid))
            
            if consecutive_weeks_achievements:
                print(f"‚úÖ –í—ã–¥–∞–Ω–æ {len(consecutive_weeks_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –Ω–µ–¥–µ–ª–∏!")
                for ach in consecutive_weeks_achievements:
                    print(f"   üîó {ach.name}")
            else:
                print("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã
            print("\nüìÜ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã...")
            consecutive_months_achievements = await AchievementService.check_consecutive_months_achievements(str(user_uuid))
            
            if consecutive_months_achievements:
                print(f"‚úÖ –í—ã–¥–∞–Ω–æ {len(consecutive_months_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã!")
                for ach in consecutive_months_achievements:
                    print(f"   üìÜ {ach.name}")
            else:
                print("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
            print("\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")
            all_achievements = await AchievementService.check_all_achievements_for_user(str(user_uuid))
            
            if all_achievements:
                print(f"‚úÖ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ {len(all_achievements)} –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!")
                for ach in all_achievements:
                    print(f"   üèÜ {ach.name}")
            else:
                print("‚ùå –ù–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 30)
        
        achievements_count_query = text("SELECT COUNT(*) FROM achievements WHERE user_id = :user_id")
        result = await session.execute(achievements_count_query, {"user_id": user_id})
        achievements_count = result.scalar()
        print(f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {achievements_count}")
        
        if achievements_count > 0:
            print(f"\nüèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            achievements_query = text("""
                SELECT name, status, created_at
                FROM achievements 
                WHERE user_id = :user_id
                ORDER BY created_at DESC
            """)
            result = await session.execute(achievements_query, {"user_id": user_id})
            achievements = result.fetchall()
            
            for ach in achievements:
                name, status, created_at = ach
                print(f"   üèÜ {name} (—Å—Ç–∞—Ç—É—Å: {status}, —Å–æ–∑–¥–∞–Ω–æ: {created_at})")

if __name__ == "__main__":
    asyncio.run(create_test_achievements())

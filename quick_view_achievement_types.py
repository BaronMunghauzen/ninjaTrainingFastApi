#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from sqlalchemy import text

async def quick_view_achievement_types():
    """–ë—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    print("üèÜ –ë–´–°–¢–†–´–ô –ü–†–û–°–ú–û–¢–† –¢–ò–ü–û–í –î–û–°–¢–ò–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    async with async_session_maker() as session:
        try:
            # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            count_query = text("SELECT COUNT(*) FROM achievement_types")
            result = await session.execute(count_query)
            total_count = result.scalar()
            
            print(f"üìä –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {total_count}")
            
            if total_count == 0:
                print("üì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                return
            
            # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_query = text("""
                SELECT category, COUNT(*) as count
                FROM achievement_types 
                GROUP BY category 
                ORDER BY count DESC
            """)
            result = await session.execute(category_query)
            categories = result.fetchall()
            
            print(f"\nüìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for cat in categories:
                print(f"   ‚Ä¢ {cat[0]}: {cat[1]} —Ç–∏–ø–æ–≤")
            
            # 3. –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
            print(f"\nüìã –í–°–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
            print("-" * 80)
            
            achievements_query = text("""
                SELECT 
                    name, 
                    category, 
                    subcategory, 
                    points, 
                    icon,
                    description
                FROM achievement_types 
                ORDER BY category, points DESC
            """)
            result = await session.execute(achievements_query)
            achievements = result.fetchall()
            
            current_category = None
            for achievement in achievements:
                if achievement[1] != current_category:
                    current_category = achievement[1]
                    print(f"\nüéØ {current_category.upper()}:")
                    print("-" * 40)
                
                print(f"  {achievement[4]} {achievement[0]:<25} | {achievement[2]:<20} | {achievement[3]:>4} –æ—á–∫–æ–≤")
                print(f"      {achievement[5]}")
            
            # 4. –¢–æ–ø-5 –ø–æ –æ—á–∫–∞–º
            print(f"\nü•á –¢–û–ü-5 –ü–û –û–ß–ö–ê–ú:")
            print("-" * 60)
            
            top_query = text("""
                SELECT name, category, points, icon
                FROM achievement_types 
                ORDER BY points DESC 
                LIMIT 5
            """)
            result = await session.execute(top_query)
            top_achievements = result.fetchall()
            
            for i, achievement in enumerate(top_achievements, 1):
                print(f"  {i}. {achievement[3]} {achievement[0]} ({achievement[1]}) - {achievement[2]} –æ—á–∫–æ–≤")
            
            print(f"\nüéØ –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: {total_count}")
            print(f"üìä –û–±—â–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤: {sum(a[3] for a in achievements)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(quick_view_achievement_types())






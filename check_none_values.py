import asyncio
from app.database import async_session_maker
from app.achievements.models import AchievementType
from sqlalchemy import select

async def check_none_values():
    async with async_session_maker() as session:
        print("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ï–ô –° NONE –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å None –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
        result = await session.execute(
            select(AchievementType).where(
                (AchievementType.name.is_(None)) |
                (AchievementType.description.is_(None)) |
                (AchievementType.category.is_(None))
            )
        )
        problematic_types = result.scalars().all()
        
        if problematic_types:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(problematic_types)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
            for at in problematic_types:
                print(f"   ‚Ä¢ ID: {at.id}, UUID: {at.uuid}")
                print(f"     name: {repr(at.name)}")
                print(f"     description: {repr(at.description)}")
                print(f"     category: {repr(at.category)}")
                print()
        else:
            print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å None –≤ is_active
        result = await session.execute(
            select(AchievementType).where(AchievementType.is_active.is_(None))
        )
        none_active_types = result.scalars().all()
        
        if none_active_types:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(none_active_types)} –∑–∞–ø–∏—Å–µ–π —Å is_active = None:")
            for at in none_active_types:
                print(f"   ‚Ä¢ {at.name} (ID: {at.id})")
        else:
            print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ is_active")

if __name__ == "__main__":
    asyncio.run(check_none_values())


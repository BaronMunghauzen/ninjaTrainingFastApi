import asyncio
from app.database import async_session_maker
from app.achievements.models import Achievement, AchievementType
from sqlalchemy import select, update

async def fix_achievement_types():
    async with async_session_maker() as session:
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–í–Ø–ó–ï–ô –î–û–°–¢–ò–ñ–ï–ù–ò–ô –° –¢–ò–ü–ê–ú–ò")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        result = await session.execute(select(AchievementType))
        achievement_types = result.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        type_by_name = {at.name: at for at in achievement_types}
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(achievement_types)} —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(type_by_name)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ —Ç–∏–ø–∞
        result = await session.execute(
            select(Achievement).where(Achievement.achievement_type_id.is_(None))
        )
        achievements = result.scalars().all()
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –±–µ–∑ —Ç–∏–ø–∞")
        print()
        
        fixed_count = 0
        not_found = []
        
        for achievement in achievements:
            achievement_type = type_by_name.get(achievement.name)
            
            if achievement_type:
                # –û–±–Ω–æ–≤–ª—è–µ–º achievement_type_id
                await session.execute(
                    update(Achievement)
                    .where(Achievement.id == achievement.id)
                    .values(achievement_type_id=achievement_type.id)
                )
                print(f"‚úÖ {achievement.name} -> {achievement_type.name} (ID: {achievement_type.id})")
                fixed_count += 1
            else:
                print(f"‚ùå {achievement.name} - —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
                not_found.append(achievement.name)
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()
        
        print()
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(not_found)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        
        if not_found:
            print("\n‚ö†Ô∏è  –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ —Ç–∏–ø–∞:")
            for name in not_found:
                print(f"   ‚Ä¢ {name}")
            print("\nüí° –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –≤ —Ç–∞–±–ª–∏—Ü–µ achievement_types")
        
        print("\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await session.execute(
            select(Achievement).where(Achievement.achievement_type_id.is_(None))
        )
        remaining = result.scalars().all()
        
        if not remaining:
            print("‚úÖ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç —Ç–∏–ø!")
        else:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {len(remaining)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –±–µ–∑ —Ç–∏–ø–∞")

if __name__ == "__main__":
    asyncio.run(fix_achievement_types())


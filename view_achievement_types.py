#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from sqlalchemy import text

async def view_achievement_types():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    print("üèÜ –ü–†–û–°–ú–û–¢–† –¢–ê–ë–õ–ò–¶–´ –¢–ò–ü–û–í –î–û–°–¢–ò–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    async with async_session_maker() as session:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
            table_exists_query = text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'achievement_types'
                );
            """)
            result = await session.execute(table_exists_query)
            table_exists = result.scalar()
            
            if not table_exists:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'achievement_types' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python create_achievement_types_table.py")
                return
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'achievement_types' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            print("\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´:")
            print("-" * 40)
            structure_query = text("""
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default,
                    ordinal_position
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = 'achievement_types' 
                ORDER BY ordinal_position;
            """)
            result = await session.execute(structure_query)
            columns = result.fetchall()
            
            for col in columns:
                nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                default = f" DEFAULT {col[3]}" if col[3] else ""
                print(f"  {col[4]:2d}. {col[0]:<20} {col[1]:<15} {nullable}{default}")
            
            # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            print("\nüìä –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–ò–°–ï–ô:")
            print("-" * 40)
            count_query = text("SELECT COUNT(*) FROM achievement_types")
            result = await session.execute(count_query)
            total_count = result.scalar()
            print(f"–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {total_count}")
            
            if total_count == 0:
                print("\nüì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ - —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                return
            
            # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
            print("-" * 40)
            category_stats_query = text("""
                SELECT category, COUNT(*) as count
                FROM achievement_types 
                GROUP BY category 
                ORDER BY count DESC
            """)
            result = await session.execute(category_stats_query)
            category_stats = result.fetchall()
            
            for stat in category_stats:
                print(f"  ‚Ä¢ {stat[0]}: {stat[1]} —Ç–∏–ø–æ–≤")
            
            # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
            print("-" * 40)
            subcategory_stats_query = text("""
                SELECT subcategory, COUNT(*) as count
                FROM achievement_types 
                WHERE subcategory IS NOT NULL
                GROUP BY subcategory 
                ORDER BY count DESC
            """)
            result = await session.execute(subcategory_stats_query)
            subcategory_stats = result.fetchall()
            
            for stat in subcategory_stats:
                print(f"  ‚Ä¢ {stat[0]}: {stat[1]} —Ç–∏–ø–æ–≤")
            
            # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—á–∫–∞–º
            print(f"\nüèÜ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–ß–ö–ê–ú:")
            print("-" * 40)
            points_stats_query = text("""
                SELECT 
                    MIN(points) as min_points,
                    MAX(points) as max_points,
                    AVG(points) as avg_points,
                    SUM(points) as total_points
                FROM achievement_types
            """)
            result = await session.execute(points_stats_query)
            points_stats = result.fetchone()
            
            print(f"  ‚Ä¢ –ú–∏–Ω–∏–º—É–º –æ—á–∫–æ–≤: {points_stats[0]}")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤: {points_stats[1]}")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –æ—á–∫–æ–≤: {points_stats[2]:.1f}")
            print(f"  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤: {points_stats[3]}")
            
            # 7. –¢–æ–ø-10 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –æ—á–∫–∞–º
            print(f"\nü•á –¢–û–ü-10 –î–û–°–¢–ò–ñ–ï–ù–ò–ô –ü–û –û–ß–ö–ê–ú:")
            print("-" * 60)
            top_query = text("""
                SELECT 
                    name, 
                    category, 
                    subcategory, 
                    points, 
                    icon,
                    description
                FROM achievement_types 
                ORDER BY points DESC 
                LIMIT 10
            """)
            result = await session.execute(top_query)
            top_achievements = result.fetchall()
            
            for i, achievement in enumerate(top_achievements, 1):
                print(f"  {i:2d}. {achievement[4]} {achievement[0]:<25} | {achievement[1]:<15} | {achievement[2]:<20} | {achievement[3]:>4} –æ—á–∫–æ–≤")
                print(f"      {achievement[5]}")
                if i < len(top_achievements):
                    print()
            
            # 8. –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            print(f"\nüìã –í–°–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
            print("=" * 80)
            
            for category in [stat[0] for stat in category_stats]:
                print(f"\nüéØ {category.upper()}:")
                print("-" * 40)
                
                category_query = text("""
                    SELECT 
                        name, 
                        subcategory, 
                        points, 
                        icon,
                        requirements
                    FROM achievement_types 
                    WHERE category = :category
                    ORDER BY points DESC
                """)
                result = await session.execute(category_query, {"category": category})
                category_achievements = result.fetchall()
                
                for achievement in category_achievements:
                    print(f"  {achievement[3]} {achievement[0]:<25} | {achievement[1]:<20} | {achievement[2]:>4} –æ—á–∫–æ–≤")
                    print(f"      –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {achievement[4]}")
                    print()
            
            # 9. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            print(f"\nüîç –ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú:")
            print("-" * 40)
            
            search_keywords = ["—É—Ç—Ä–æ", "–Ω–æ—á—å", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–≥–æ–¥", "—Å–∏–ª–∞", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"]
            
            for keyword in search_keywords:
                search_query = text("""
                    SELECT name, category, points, icon
                    FROM achievement_types 
                    WHERE LOWER(name) LIKE LOWER(:keyword) 
                       OR LOWER(description) LIKE LOWER(:keyword)
                       OR LOWER(requirements) LIKE LOWER(:keyword)
                    ORDER BY points DESC
                """)
                result = await session.execute(search_query, {"keyword": f"%{keyword}%"})
                search_results = result.fetchall()
                
                if search_results:
                    print(f"\n  üîé '{keyword}':")
                    for result_item in search_results:
                        print(f"    ‚Ä¢ {result_item[3]} {result_item[0]} ({result_item[1]}) - {result_item[2]} –æ—á–∫–æ–≤")
            
            # 10. SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π
            print(f"\nüí° –ü–û–õ–ï–ó–ù–´–ï SQL –ó–ê–ü–†–û–°–´:")
            print("-" * 40)
            print("""
-- –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
SELECT * FROM achievement_types WHERE category = '–í—Ä–µ–º–µ–Ω–Ω—ã–µ';

-- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º–∏ –æ—á–∫–∞–º–∏
SELECT * FROM achievement_types WHERE points >= 100 ORDER BY points DESC;

-- –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
SELECT * FROM achievement_types WHERE name ILIKE '%–Ω–µ–¥–µ–ª—è%';

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
SELECT category, COUNT(*), AVG(points), SUM(points) 
FROM achievement_types 
GROUP BY category 
ORDER BY SUM(points) DESC;

-- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
SELECT * FROM achievement_types 
WHERE subcategory IN ('–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å')
ORDER BY points;
            """)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(view_achievement_types())






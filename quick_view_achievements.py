#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from sqlalchemy import text

async def quick_view_achievements():
    """–ë—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    print("üèÜ –ë–´–°–¢–†–´–ô –ü–†–û–°–ú–û–¢–† –í–°–ï–• –î–û–°–¢–ò–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    async with async_session_maker() as session:
        try:
            # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            count_query = text("SELECT COUNT(*) FROM achievements")
            result = await session.execute(count_query)
            total_count = result.scalar()
            
            print(f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ: {total_count}")
            
            if total_count == 0:
                print("üì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                return
            
            # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_query = text("""
                SELECT status, COUNT(*) as count
                FROM achievements 
                GROUP BY status 
                ORDER BY count DESC
            """)
            result = await session.execute(status_query)
            status_stats = result.fetchall()
            
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for stat in status_stats:
                print(f"   ‚Ä¢ {stat[0]}: {stat[1]} –∑–∞–ø–∏—Å–µ–π")
            
            # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users_query = text("""
                SELECT user_id, COUNT(*) as count
                FROM achievements 
                GROUP BY user_id 
                ORDER BY count DESC
            """)
            result = await session.execute(users_query)
            users_stats = result.fetchall()
            
            print(f"\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
            for user_stat in users_stats:
                # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                email_query = text('SELECT email FROM "user" WHERE id = :user_id')
                email_result = await session.execute(email_query, {"user_id": user_stat[0]})
                email = email_result.scalar()
                print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_stat[0]} ({email}): {user_stat[1]} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            
            # 4. –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
            print(f"\nüìã –í–°–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
            print("-" * 60)
            
            achievements_query = text("""
                SELECT 
                    a.id,
                    a.name,
                    a.status,
                    a.user_id,
                    u.email,
                    a.created_at
                FROM achievements a
                JOIN "user" u ON a.user_id = u.id
                ORDER BY a.created_at DESC
            """)
            result = await session.execute(achievements_query)
            achievements = result.fetchall()
            
            for i, achievement in enumerate(achievements, 1):
                print(f"{i:2d}. [{achievement[2].upper():<8}] {achievement[1]:<30} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {achievement[4]} | {achievement[5]}")
            
            # 5. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            print(f"\nüéØ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –¢–ò–ü–ê–ú:")
            print("-" * 60)
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            time_achievements = [a for a in achievements if a[1] in ['–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞', '–°–æ–≤–∞']]
            if time_achievements:
                print(f"üåÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({len(time_achievements)}):")
                for a in time_achievements:
                    print(f"   ‚Ä¢ {a[1]}")
            
            # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            holiday_achievements = [a for a in achievements if any(x in a[1] for x in ['–ù–æ–≤—ã–º –≥–æ–¥–æ–º', '–∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å', '–ú—É–∂—Å–∫–æ–π –¥–µ–Ω—å'])]
            if holiday_achievements:
                print(f"üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({len(holiday_achievements)}):")
                for a in holiday_achievements:
                    print(f"   ‚Ä¢ {a[1]}")
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            training_count_achievements = [a for a in achievements if '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫' in a[1] and not any(x in a[1] for x in ['–Ω–µ–¥–µ–ª—é', '–Ω–µ–¥–µ–ª–∏', '–º–µ—Å—è—Ü–∞'])]
            if training_count_achievements:
                print(f"üí™ –ó–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ({len(training_count_achievements)}):")
                for a in training_count_achievements:
                    print(f"   ‚Ä¢ {a[1]}")
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª–∏
            weekly_achievements = [a for a in achievements if '–Ω–µ–¥–µ–ª—é' in a[1] or '–Ω–µ–¥–µ–ª–∏' in a[1]]
            if weekly_achievements:
                print(f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª–∏ ({len(weekly_achievements)}):")
                for a in weekly_achievements:
                    print(f"   ‚Ä¢ {a[1]}")
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü—ã
            monthly_achievements = [a for a in achievements if '–º–µ—Å—è—Ü–∞' in a[1]]
            if monthly_achievements:
                print(f"üìÜ –ó–∞ –º–µ—Å—è—Ü—ã ({len(monthly_achievements)}):")
                for a in monthly_achievements:
                    print(f"   ‚Ä¢ {a[1]}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            special_achievements = [a for a in achievements if a[1] in ['–ú–æ—â—å –∏ —Å–∏–ª–∞']]
            if special_achievements:
                print(f"‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ ({len(special_achievements)}):")
                for a in special_achievements:
                    print(f"   ‚Ä¢ {a[1]}")
            
            # 6. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            print(f"\nüïí –ü–û–°–õ–ï–î–ù–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
            print("-" * 60)
            recent_achievements = achievements[:5]
            for a in recent_achievements:
                print(f"   ‚Ä¢ {a[1]} - {a[5]}")
            
            print(f"\nüéØ –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(set(a[1] for a in achievements))}")
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(quick_view_achievements())






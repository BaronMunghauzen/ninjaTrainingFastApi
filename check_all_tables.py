import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import async_session_maker
from sqlalchemy import text

async def check_all_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            tables_query = text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name
            """)
            result = await session.execute(tables_query)
            tables = result.fetchall()
            
            print("üìã –í–°–ï –¢–ê–ë–õ–ò–¶–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
            print("=" * 60)
            
            for table in tables:
                table_name = table[0]
                print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞: {table_name}")
                print("-" * 40)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
                try:
                    count_query = text(f"SELECT COUNT(*) FROM {table_name}")
                    result = await session.execute(count_query)
                    count = result.scalar()
                    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if count > 0:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                        structure_query = text(f"""
                            SELECT column_name, data_type, is_nullable, column_default
                            FROM information_schema.columns 
                            WHERE table_name = '{table_name}' 
                            ORDER BY ordinal_position
                        """)
                        result = await session.execute(structure_query)
                        columns = result.fetchall()
                        
                        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                        for col in columns:
                            nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                            default = f" DEFAULT {col[3]}" if col[3] else ""
                            print(f"  ‚Ä¢ {col[0]}: {col[1]} {nullable}{default}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø–∏—Å–µ–π
                        if count <= 5:
                            sample_query = text(f"SELECT * FROM {table_name} LIMIT 3")
                            result = await session.execute(sample_query)
                            samples = result.fetchall()
                            
                            print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
                            for i, sample in enumerate(samples, 1):
                                print(f"  {i}. {sample}")
                        else:
                            print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π: (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–ª—è –ø–æ–∫–∞–∑–∞)")
                            
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")

if __name__ == "__main__":
    asyncio.run(check_all_tables())

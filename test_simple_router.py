import asyncio
from app.database import async_session_maker
from app.achievements.models import AchievementType
from app.achievements.schemas import AchievementTypeDisplay
from sqlalchemy import select

async def test_simple_router():
    async with async_session_maker() as session:
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û –†–û–£–¢–ï–†–ê")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            result = await session.execute(select(AchievementType))
            achievement_types = result.scalars().all()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤: {len(achievement_types)}")
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ö–µ–º—É
            print("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ö–µ–º—É...")
            for i, at in enumerate(achievement_types[:3]):  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –Ω–∞–ø—Ä—è–º—É—é
                    display = AchievementTypeDisplay.model_validate(at)
                    print(f"‚úÖ {i+1}. {display.name} - —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    print(f"‚ùå {i+1}. {at.name} - –æ—à–∏–±–∫–∞: {e}")
                    break
            
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_simple_router())


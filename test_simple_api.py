import asyncio
from fastapi import FastAPI, Depends
from fastapi.testclient import TestClient
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import get_async_session
from app.achievements.dao import AchievementTypeDAO
from app.achievements.schemas import AchievementTypeDisplay
from typing import List

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

@app.get("/test/achievements/types", response_model=List[AchievementTypeDisplay])
async def test_get_achievement_types(
    session: AsyncSession = Depends(get_async_session)
):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        achievement_type_dao = AchievementTypeDAO(session)
        active_types = await achievement_type_dao.find_active()
        return active_types
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º API: {e}")
        raise

# –¢–µ—Å—Ç–∏—Ä—É–µ–º API
async def test_api():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û API")
    print("=" * 50)
    
    try:
        with TestClient(app) as client:
            print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç...")
            response = client.get("/test/achievements/types")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
                
                if data:
                    print(f"   –ü–µ—Ä–≤—ã–π —Ç–∏–ø: {data[0]['name']}")
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_api())


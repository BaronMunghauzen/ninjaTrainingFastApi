#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
import chardet
from pathlib import Path

def check_file_encoding(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'rb') as f:
            raw_data = f.read()
            
        if not raw_data:
            return "empty"
            
        result = chardet.detect(raw_data)
        return result['encoding'], result['confidence']
    except Exception as e:
        return f"error: {str(e)}"

def scan_project():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    project_root = Path(".")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    text_extensions = {'.py', '.txt', '.md', '.ini', '.yml', '.yaml', '.json'}
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
    print("=" * 60)
    
    problematic_files = []
    
    for file_path in project_root.rglob("*"):
        if file_path.is_file() and file_path.suffix in text_extensions:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ git
            if any(part.startswith('.') for part in file_path.parts):
                continue
                
            encoding_info = check_file_encoding(file_path)
            
            if isinstance(encoding_info, tuple):
                encoding, confidence = encoding_info
                if encoding and encoding.lower() != 'utf-8':
                    print(f"‚ö†Ô∏è  {file_path}: {encoding} (confidence: {confidence:.2f})")
                    problematic_files.append((file_path, encoding, confidence))
                elif not encoding:
                    print(f"‚ùì {file_path}: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞")
                    problematic_files.append((file_path, "unknown", 0))
            else:
                print(f"‚ùå {file_path}: {encoding_info}")
                problematic_files.append((file_path, "error", 0))
    
    print("=" * 60)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(problematic_files)}")
    
    if problematic_files:
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ UTF-8")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ UTF-8")
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8")

if __name__ == "__main__":
    scan_project() 
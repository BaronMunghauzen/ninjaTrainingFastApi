#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ user_trainings
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: uvicorn app.main:app --reload
"""

import asyncio
import httpx
import time
import json


async def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ user_trainings"""
    url = "http://127.0.0.1:8000/user_trainings/"
    params = {
        "user_program_uuid": "d02e8d12-5756-47f2-afd3-88cca3c97ef3",
        "page": 1,
        "page_size": 50
    }
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ user_trainings...")
    print(f"üì° URL: {url}")
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    print("-" * 50)
    
    async with httpx.AsyncClient() as client:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print("üìä –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        start_time = time.time()
        
        response = await client.get(url, params=params)
        end_time = time.time()
        execution_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data.get('data', []))}")
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {data.get('pagination', {}).get('total_count', 0)}")
            
            if execution_time < 2.0:
                print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!")
            elif execution_time < 5.0:
                print("‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è")
            else:
                print("‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}...")
        
        print("-" * 50)
        
        # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        print("üîÑ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        start_time = time.time()
        
        response = await client.get(url, params=params)
        end_time = time.time()
        cached_execution_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫—ç—à): {cached_execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if cached_execution_time < execution_time * 0.8:
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è")
        
        print("-" * 50)
        
        # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        print("üìÑ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        params_page1 = {**params, "page": 1, "page_size": 10}
        response = await client.get(url, params=params_page1)
        if response.status_code == 200:
            data1 = response.json()
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: {len(data1.get('data', []))} –∑–∞–ø–∏—Å–µ–π")
            
            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            params_page2 = {**params, "page": 2, "page_size": 10}
            response2 = await client.get(url, params=params_page2)
            if response2.status_code == 200:
                data2 = response2.json()
                print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: {len(data2.get('data', []))} –∑–∞–ø–∏—Å–µ–π")
                
                if data1.get('data') and data2.get('data'):
                    if data1['data'][0]['uuid'] != data2['data'][0]['uuid']:
                        print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    else:
                        print("‚ùå –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2: {response2.status_code}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1: {response.status_code}")
        
        print("-" * 50)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò USER_TRAININGS")
    print("=" * 60)
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --reload")
    print("=" * 60)
    
    asyncio.run(test_performance()) 
import pytest
import time
from httpx import AsyncClient
from app.main import app


@pytest.mark.asyncio
async def test_user_trainings_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ user_trainings"""
    async with AsyncClient(base_url="http://test") as ac:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å user_program_uuid
        start_time = time.time()
        
        response = await ac.get(
            "/user_trainings/",
            params={
                "user_program_uuid": "d02e8d12-5756-47f2-afd3-88cca3c97ef3",
                "page": 1,
                "page_size": 50
            }
        )
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
        assert response.status_code == 200
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–ª–µ–º–æ–µ (–º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥)
        assert execution_time < 2.0, f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥, —á—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        data = response.json()
        assert "data" in data
        assert "pagination" in data
        assert "total_count" in data["pagination"]
        assert "page" in data["pagination"]
        assert "page_size" in data["pagination"]
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(data['data'])} –∑–∞–ø–∏—Å–µ–π –∏–∑ {data['pagination']['total_count']} –≤—Å–µ–≥–æ")


@pytest.mark.asyncio
async def test_user_trainings_pagination():
    """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    async with AsyncClient(base_url="http://test") as ac:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response1 = await ac.get(
            "/user_trainings/",
            params={
                "user_program_uuid": "d02e8d12-5756-47f2-afd3-88cca3c97ef3",
                "page": 1,
                "page_size": 10
            }
        )
        
        assert response1.status_code == 200
        data1 = response1.json()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response2 = await ac.get(
            "/user_trainings/",
            params={
                "user_program_uuid": "d02e8d12-5756-47f2-afd3-88cca3c97ef3",
                "page": 2,
                "page_size": 10
            }
        )
        
        assert response2.status_code == 200
        data2 = response2.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ä–∞–∑–Ω—ã–µ
        if data1["data"] and data2["data"]:
            assert data1["data"][0]["uuid"] != data2["data"][0]["uuid"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        assert data1["pagination"]["page"] == 1
        assert data2["pagination"]["page"] == 2
        assert data1["pagination"]["page_size"] == 10
        assert data2["pagination"]["page_size"] == 10
        assert data1["pagination"]["total_count"] == data2["pagination"]["total_count"] 